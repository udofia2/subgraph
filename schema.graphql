
type User @entity {
  id: Bytes! # user address
  totalStaked: BigInt! # current total staked amount
  totalWithdrawn: BigInt!
  totalRewardsClaimed: BigInt! # lifetime rewards claimed
  totalEmergencyWithdrawals: BigInt! # lifetime emergency withdrawals
  stakingCount: BigInt! # number of times staked
  withdrawalCount: BigInt! # number of times withdrawn
  firstStakeTimestamp: BigInt! # when user first staked
  lastActivityTimestamp: BigInt! # last interaction timestamp
  
  # Relations to individual transactions
  stakes: [Staked!]! @derivedFrom(field: "user")
  withdrawals: [Withdrawn!]! @derivedFrom(field: "user")
  rewardsClaimed: [RewardsClaimed!]! @derivedFrom(field: "user"  emergencyWithdrawals: [EmergencyWithdrawn!]! @derivedFrom(field: "user")
}

type ProtocolStats @entity {
  id: ID! # "protocol-stats" 
  totalStaked: BigInt!
  currentRewardRate: BigInt! # current APR
  totalUsers: BigInt! # number of unique stakers
  totalTransactions: BigInt!
  totalVolumeStaked: BigInt! # lifetime volume staked
  totalVolumeWithdrawn: BigInt! # lifetime volume withdrawn
  totalRewardsPaid: BigInt!
  lastUpdatedTimestamp: BigInt!
  lastUpdatedBlock: BigInt!
}


type EmergencyWithdrawn @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  amount: BigInt! # uint256
  penalty: BigInt! # uint256
  timestamp: BigInt! # uint256
  newTotalStaked: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RewardRateUpdated @entity(immutable: true) {
  id: Bytes!
  oldRate: BigInt! # uint256
  newRate: BigInt! # uint256
  timestamp: BigInt! # uint256
  totalStaked: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RewardsClaimed @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  amount: BigInt! # uint256
  timestamp: BigInt! # uint256
  newPendingRewards: BigInt! # uint256
  totalStaked: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Staked @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  amount: BigInt! # uint256
  timestamp: BigInt! # uint256
  newTotalStaked: BigInt! # uint256
  currentRewardRate: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakingInitialized @entity(immutable: true) {
  id: Bytes!
  stakingToken: Bytes! # address
  initialRewardRate: BigInt! # uint256
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}


type Withdrawn @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  amount: BigInt! # uint256
  timestamp: BigInt! # uint256
  newTotalStaked: BigInt! # uint256
  currentRewardRate: BigInt! # uint256
  rewardsAccrued: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
